// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
public partial class PricePredictions
{
    /// <summary>
    /// model input class for PricePredictions.
    /// </summary>
    #region model input class
    public class ModelInput
    {
        [LoadColumn(1)]
        [ColumnName(@"location")]
        public string Location { get; set; }

        [LoadColumn(2)]
        [ColumnName(@"location_area")]
        public string Location_area { get; set; }

        [LoadColumn(3)]
        [ColumnName(@"seller_type")]
        public string Seller_type { get; set; }

        [LoadColumn(4)]
        [ColumnName(@"type")]
        public string Type { get; set; }

        [LoadColumn(5)]
        [ColumnName(@"partitioning")]
        public string Partitioning { get; set; }

        [LoadColumn(6)]
        [ColumnName(@"comfort")]
        public string Comfort { get; set; }

        [LoadColumn(7)]
        [ColumnName(@"price")]
        public float Price { get; set; }

        [LoadColumn(8)]
        [ColumnName(@"rooms_count")]
        public float Rooms_count { get; set; }

        [LoadColumn(9)]
        [ColumnName(@"useful_surface")]
        public float Useful_surface { get; set; }

        [LoadColumn(10)]
        [ColumnName(@"built_surface")]
        public float Built_surface { get; set; }

        [LoadColumn(11)]
        [ColumnName(@"construction_year")]
        public float Construction_year { get; set; }

        [LoadColumn(14)]
        [ColumnName(@"level")]
        public string Level { get; set; }

    }

    #endregion

    /// <summary>
    /// model output class for PricePredictions.
    /// </summary>
    #region model output class
    public class ModelOutput
    {
        //[ColumnName(@"location")]
        //public float[] Location { get; set; }

        //[ColumnName(@"location_area")]
        //public float[] Location_area { get; set; }

        //[ColumnName(@"seller_type")]
        //public float[] Seller_type { get; set; }

        //[ColumnName(@"type")]
        //public float[] Type { get; set; }

        //[ColumnName(@"partitioning")]
        //public float[] Partitioning { get; set; }

        //[ColumnName(@"comfort")]
        //public float[] Comfort { get; set; }

        //[ColumnName(@"price")]
        //public float Price { get; set; }

        //[ColumnName(@"rooms_count")]
        //public float Rooms_count { get; set; }

        //[ColumnName(@"useful_surface")]
        //public float Useful_surface { get; set; }

        //[ColumnName(@"built_surface")]
        //public float Built_surface { get; set; }

        //[ColumnName(@"construction_year")]
        //public float Construction_year { get; set; }

        //[ColumnName(@"level")]
        //public float[] Level { get; set; }

        //[ColumnName(@"Features")]
        //public float[] Features { get; set; }

        [ColumnName(@"Score")]
        public float Score { get; set; }

    }

    #endregion

    private static string MLNetModelPath = Path.GetFullPath("PricePredictions.mlnet");

    public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);


    private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
    {
        var mlContext = new MLContext();
        ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
        return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
    }

    /// <summary>
    /// Use this method to predict on <see cref="ModelInput"/>.
    /// </summary>
    /// <param name="input">model input.</param>
    /// <returns><seealso cref=" ModelOutput"/></returns>
    public static ModelOutput Predict(ModelInput input)
    {
        var predEngine = PredictEngine.Value;
        return predEngine.Predict(input);
    }

}
