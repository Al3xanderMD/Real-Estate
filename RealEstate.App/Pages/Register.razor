@page "/register"
@using FluentValidation
@using FluentValidation.Results
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstate.App.Auth
@using RealEstate.App.Models
@using RealEstate.App.Validators
@using System.Net.Http.Json
@using System.Net.Http

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject IValidator<RegisterViewModel> Validator
@inject ISnackbar Snackbar

<head>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="css/styles.css" />

    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
</head>

<PageTitle>Register</PageTitle>

<div class="content-container">
    <div class="form-card">
        <div class="auth-form-buttons-div">
            <MudButton Variant="Variant.Text" Href="login">Login</MudButton>
            
            <MudButton Variant="Variant.Text" Href="register">Register</MudButton>
        </div>

        <EditForm Model="@registerRequest" OnValidSubmit="OnSubmit">
            <hr class="auth-hr">

            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" @bind-Value="registerRequest.email" id="email" type="email" Label="Enter email"></MudTextField>

                <div class="error-msg auth-message">@emailError</div>
            </div>

            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" id="username" @bind-Value="registerRequest.username" type="name" Label="Username"></MudTextField>
                
                <div class="error-msg auth-message">@usernameError</div>
            </div>

            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" id="name" @bind-Value="registerRequest.name" type="name" Label="Name"></MudTextField>

                <div class="error-msg auth-message">@nameError</div>
            </div>

            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" id="phone" @bind-Value="registerRequest.phoneNumber" type="phone" Label="Phone number"></MudTextField>

                <div class="error-msg auth-message">@phoneNumberError</div>
            </div>

            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" id="password" @bind-Value="registerRequest.password" InputType="InputType.Password" Label="Password"></MudTextField>

                <div class="error-msg auth-message">@passwordError</div>
            </div>

            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" id="confirmPassword" @bind-Value="registerRequest.confirmPassword" InputType="InputType.Password" Label="Confirm password"></MudTextField>

                <div class="error-msg auth-message">@confirmPasswordError</div>
            </div>

            <div class="password-suggestions">
                Must be at least 8 characters <br>
                At least 1 special character<br>
                Must contain letters and numbers<br>
                At least 1 lower and 1 uppercase letter<br>
            </div>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>

            <hr class="auth-hr">

            <div>By submitting I accept the terms of use</div>

        </EditForm>
    </div> 
</div>

@code {
    RegisterViewModel registerRequest { get; set; } = new RegisterViewModel(); 
    string error { get; set; }
    string emailError { get; set; }
    string usernameError { get; set; }
    string nameError { get; set; }
    string passwordError { get; set; }
    string confirmPasswordError { get; set; }
    string phoneNumberError { get; set; }
    private AuthenticationState authenticationState;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authStateProvider.GetAuthenticationStateAsync();

        if (authenticationState.User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
    }

    async Task OnSubmit()
    {
        ValidationResult results = Validator.Validate(registerRequest);
        emailError = null;
        passwordError = null;
        confirmPasswordError = null;
        phoneNumberError = null;
        usernameError = null;
        nameError = null;
        error = null;

        if (!results.IsValid)
        {
            foreach (var failure in results.Errors)
            {
                if (failure.PropertyName == "email" && emailError == null)
                    emailError = failure.ErrorMessage;
                else if (failure.PropertyName == "password" && passwordError == null)
                    passwordError = failure.ErrorMessage;
                else if (failure.PropertyName == "confirmPassword" && confirmPasswordError == null)
                    confirmPasswordError = failure.ErrorMessage;
                else if (failure.PropertyName == "phoneNumber" && phoneNumberError == null)
                    phoneNumberError = failure.ErrorMessage;
                else if (failure.PropertyName == "username" && usernameError == null)
                    usernameError = failure.ErrorMessage;
                else if (failure.PropertyName == "name" && nameError == null)
                    nameError = failure.ErrorMessage;
            }
        }
        else {
            try
            {
                await authStateProvider.Register(registerRequest);
                LogToConsole("Regiser ok");
                navigationManager.NavigateTo("/Login");
            }
            catch (Exception ex)
            {
                LogToConsole("Register failed");
                error = ex.Message;
                Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
            }
        }
    }

    void LogToConsole(string message)
    {
        JSRuntime.InvokeVoidAsync("console.log", message);
    }
}