@page "/register"
@using FluentValidation
@using FluentValidation.Results
@using RealEstate.App.Auth
@using RealEstate.App.Models
@using RealEstate.App.Validators
@using System.Net.Http.Json
@using System.Net.Http
@using MatBlazor
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject IValidator<RegisterViewModel> Validator
<head>
    <link rel="stylesheet" href="css/styles.css" />
    <script src="_content/MatBlazor/dist/matBlazor.js"></script>
    <link href="_content/MatBlazor/dist/matBlazor.css" rel="stylesheet" />
</head>

<div class="content-container">
    <div class="form-card">
        <div class="auth-form-buttons-div">
            <MatButtonLink Href="login">Login</MatButtonLink>
            
            <MatButtonLink Href="register">Register</MatButtonLink>
        </div>

        <EditForm Model="@registerRequest" OnValidSubmit="OnSubmit">
            <hr class="auth-hr">

            <div class="auth-input-div">
                <MatTextField @bind-Value="registerRequest.email" id="email" type="email" Label="Enter email"></MatTextField>

                <div class="error-msg auth-message">@emailError</div>
            </div>

            <div class="auth-input-div">
                <MatTextField id="username" @bind-Value="registerRequest.username" type="name" Label="Username"></MatTextField>
                
                <div class="error-msg auth-message">@usernameError</div>
            </div>

            <div class="auth-input-div">
                <MatTextField id="name" @bind-Value="registerRequest.name" type="name" Label="Name"></MatTextField>

                <div class="error-msg auth-message">@nameError</div>
            </div>

            <div class="auth-input-div">
                <MatTextField id="phone" @bind-Value="registerRequest.phoneNumber" type="phone" Label="Phone number"></MatTextField>

                <div class="error-msg auth-message">@phoneNumberError</div>
            </div>

            <div class="auth-input-div">
                <MatTextField id="password" @bind-Value="registerRequest.password" type="password" Label="Password"></MatTextField>

                <div class="error-msg auth-message">@passwordError</div>
            </div>

            <div class="auth-input-div">
                <MatTextField id="confirmPassword" @bind-Value="registerRequest.confirmPassword" type="password" Label="Confirm password"></MatTextField>

                <div class="error-msg auth-message">@confirmPasswordError</div>
            </div>

            <div class="password-suggestions">
                Must be at least 8 characters <br>
                At least 1 special character<br>
                Must contain letters and numbers<br>
                At least 1 lower and 1 uppercase letter<br>
            </div>

            <MatButton Class="submit-btn" Raised="true" type="submit">Submit</MatButton>

            <hr class="auth-hr">

            <div>By submitting I accept the terms of use</div>

        </EditForm>
    </div> 
</div>

@code {
    RegisterViewModel registerRequest { get; set; } = new RegisterViewModel(); 
    string error { get; set; }
    string emailError { get; set; }
    string usernameError { get; set; }
    string nameError { get; set; }
    string passwordError { get; set; }
    string confirmPasswordError { get; set; }
    string phoneNumberError { get; set; }

    async Task OnSubmit()
    {
        ValidationResult results = Validator.Validate(registerRequest);
        emailError = null;
        passwordError = null;
        confirmPasswordError = null;
        phoneNumberError = null;
        usernameError = null;
        nameError = null;
        error = null;

        if (!results.IsValid)
        {
            foreach (var failure in results.Errors)
            {
                if (failure.PropertyName == "email" && emailError == null)
                    emailError = failure.ErrorMessage;
                else if (failure.PropertyName == "password" && passwordError == null)
                    passwordError = failure.ErrorMessage;
                else if (failure.PropertyName == "confirmPassword" && confirmPasswordError == null)
                    confirmPasswordError = failure.ErrorMessage;
                else if (failure.PropertyName == "phoneNumber" && phoneNumberError == null)
                    phoneNumberError = failure.ErrorMessage;
                else if (failure.PropertyName == "username" && usernameError == null)
                    usernameError = failure.ErrorMessage;
                else if (failure.PropertyName == "name" && nameError == null)
                    nameError = failure.ErrorMessage;
            }
        }
        else {
            try
            {
                await authStateProvider.Register(registerRequest);
                LogToConsole("Regiser ok");
                navigationManager.NavigateTo("/Login");
            }
            catch (Exception e)
            {
                LogToConsole("Register failed");
                error = e.Message;
            }
        }
    }

    void LogToConsole(string message)
    {
        JSRuntime.InvokeVoidAsync("console.log", message);
    }
}
@* 
@code {
    private EmailModel emailModel = new EmailModel();
    private string password;
    private string confirmPassword;
    public string message = "";
    private User user = new User();

    private async Task SubmitForm(User user)
    {
        var request = new HttpRequestMessage
            {
                Method = HttpMethod.Post,
                RequestUri = new Uri("https://localhost:7190/api/v1/Authentication/register?role=User"), // Update with your API endpoint
                Content = JsonContent.Create(user)
            };
        // Send a POST request to the API
        var response = await HttpClient.SendAsync(request);

        // Handle the API response if needed
        // For demonstration purposes, just print the response to the console
        Console.WriteLine(response);
    }

        private void HandleValidSubmit()
        {

            if (password == confirmPassword)
			{
                message="";
                user.email = emailModel.Email;
                user.username = emailModel.Username;
                user.phoneNumber = emailModel.Phone;
                user.password = password;
                user.name = "";

                var result = SubmitForm(user);

                if (result.Status != TaskStatus.Faulted)
				{
					message = "Success";
				}
				else
				{
					message = "Please check supplied credentials";
				}
			}
			else
			{
                message = "Passwords do not match";
			}
        }
}
 *@