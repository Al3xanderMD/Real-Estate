@page "/resetpw"
@using FluentValidation
@using FluentValidation.Results
@using RealEstate.App.Auth
@using RealEstate.App.Models
@using System.Web
@using RealEstate.App.Tools

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject IValidator<ResetPasswordViewModel> Validator
@inject ISnackbar Snackbar

<head>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="css/styles.css?v=@MyTools.ver" />

    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
</head>

<DataLoader />

<PageTitle>Reset Password</PageTitle>

<div class="content-container">
    <div class="form-card">
        <h5 class="mat-h5">Reset your password</h5>
        <EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="resetPwRequest">
            <hr class="auth-hr">

            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" InputType="InputType.Password" id="inputPassword" @bind-Value="resetPwRequest.password" Label="Password"></MudTextField>

                <div class="error-msg auth-message">@passwordError</div>
            </div>

            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" InputType="InputType.Password" id="confirmPassword" @bind-Value="resetPwRequest.confirmPassword" Label="Confirm password"></MudTextField>

                <div class="error-msg auth-message">@confirmPasswordError</div>
            </div>
            <br />

            <hr class="auth-hr">

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Reset password</MudButton>

            <label class="text-danger">@error</label>
        </EditForm>

    </div>
</div>


@code {
    ResetPasswordViewModel resetPwRequest { get; set; } = new ResetPasswordViewModel();
    string error { get; set; }
    string passwordError { get; set; }
    string confirmPasswordError { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        string url = navigationManager.Uri;
        string parsedUrl = url.Split("?")[1];
        var paramsCollection = HttpUtility.ParseQueryString(parsedUrl);
        foreach (var key in paramsCollection.AllKeys)
        {
            Console.WriteLine($"Key: {key} => Value: {paramsCollection[key]}");
        }

        resetPwRequest.email = paramsCollection["email"];
        resetPwRequest.token = paramsCollection["token"];

        if (resetPwRequest.email == null || resetPwRequest.token == null)
        {
            error = "Invalid Email or Token " + parsedUrl;
        }
    }

    async Task OnSubmit()
    {
        ValidationResult results = Validator.Validate(resetPwRequest);
        passwordError = null;
        confirmPasswordError = null;
        error = null;
        if (!results.IsValid)
        {
            foreach (var failure in results.Errors)
            {
                if (failure.PropertyName == "password" && passwordError == null)
                    passwordError = failure.ErrorMessage;
                else if (failure.PropertyName == "confirmPassword" && confirmPasswordError == null)
                    confirmPasswordError = failure.ErrorMessage;
            }
        }
        else
        {
            try
            {
                await authStateProvider.ResetPassword(resetPwRequest);
                LogToConsole("Confirm password ok");
                navigationManager.NavigateTo("/Login");
            }
            catch (Exception ex)
            {
                LogToConsole("Confirm password failed");
                Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
                error = ex.Message;
            }
            
        }
        void LogToConsole(string message)
        {
            JSRuntime.InvokeVoidAsync("console.log", message);
        }
        
    }
}
