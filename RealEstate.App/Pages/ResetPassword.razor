@page "/resetpw"
@using RealEstate.App.Auth
@using RealEstate.App.Models
@using System.Web
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<head>
    <link rel="stylesheet" href="css/styles.css" />
</head>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="resetPwRequest">
    <DataAnnotationsValidator />

    <label for="inputPassword" class="sr-only">Password</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="resetPwRequest.password" />
    <ValidationMessage For="@(() => resetPwRequest.password)" />

    <label for="confirmPassword" class="sr-only">Confirm password</label>
    <InputText type="password" id="confirmPassword" class="form-control" placeholder="Confirm password" @bind-Value="resetPwRequest.confirmPassword" />
    <ValidationMessage For="@(() => resetPwRequest.confirmPassword)" />

    <br />

    <NavLink href="forgotPw">
        <h6 class="font-weight-normal text-center">Forgot password</h6>
    </NavLink>

    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>

    <label class="text-danger">@error</label>
</EditForm>

@code {
    private ResetPasswordViewModel resetPwRequest = new ResetPasswordViewModel();
    public string error = "";


    protected override void OnInitialized()
    {
        base.OnInitialized();
        string url = navigationManager.Uri;
        string parsedUrl = url.Split("?")[1];
        var paramsCollection = HttpUtility.ParseQueryString(parsedUrl);
        foreach (var key in paramsCollection.AllKeys)
        {
            Console.WriteLine($"Key: {key} => Value: {paramsCollection[key]}");
        }

        resetPwRequest.email = paramsCollection["email"];
        resetPwRequest.token = paramsCollection["token"];

        if (resetPwRequest.email == null || resetPwRequest.token == null)
        {
            error = "Invalid Email or Token " + parsedUrl;
        }
    }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.ResetPassword(resetPwRequest);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
