@page "/resetpw"
@using FluentValidation
@using FluentValidation.Results
@using RealEstate.App.Auth
@using RealEstate.App.Models
@using System.Web
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject IValidator<ResetPasswordViewModel> Validator

<head>
    <link rel="stylesheet" href="css/styles.css" />
</head>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="resetPwRequest">

    <label for="inputPassword" class="sr-only">Password</label>
    <InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="resetPwRequest.password" />
    <div class="error-msg auth-message">@passwordError</div>

    <label for="confirmPassword" class="sr-only">Confirm password</label>
    <InputText type="password" id="confirmPassword" class="form-control" placeholder="Confirm password" @bind-Value="resetPwRequest.confirmPassword" />
    <div class="error-msg auth-message">@confirmPasswordError</div>

    <br />

    <button class="btn btn-lg btn-primary btn-block" type="submit">Sign in</button>

    <label class="text-danger">@error</label>
</EditForm>

@code {
    ResetPasswordViewModel resetPwRequest { get; set; } = new ResetPasswordViewModel();
    string error { get; set; }
    string passwordError { get; set; }
    string confirmPasswordError { get; set; }


    protected override void OnInitialized()
    {
        base.OnInitialized();
        string url = navigationManager.Uri;
        string parsedUrl = url.Split("?")[1];
        var paramsCollection = HttpUtility.ParseQueryString(parsedUrl);
        foreach (var key in paramsCollection.AllKeys)
        {
            Console.WriteLine($"Key: {key} => Value: {paramsCollection[key]}");
        }

        resetPwRequest.email = paramsCollection["email"];
        resetPwRequest.token = paramsCollection["token"];

        if (resetPwRequest.email == null || resetPwRequest.token == null)
        {
            error = "Invalid Email or Token " + parsedUrl;
        }
    }

    async Task OnSubmit()
    {
        ValidationResult results = Validator.Validate(resetPwRequest);
        passwordError = null;
        confirmPasswordError = null;
        error = null;
        if (!results.IsValid)
        {
            foreach (var failure in results.Errors)
            {
                if (failure.PropertyName == "password" && passwordError == null)
                    passwordError = failure.ErrorMessage;
                else if (failure.PropertyName == "confirmPassword" && confirmPasswordError == null)
                    confirmPasswordError = failure.ErrorMessage;
            }
        }
        else
        {
            try
            {
                await authStateProvider.ResetPassword(resetPwRequest);
                LogToConsole("Confirm password ok");
                navigationManager.NavigateTo("/Login");
            }
            catch (Exception ex)
            {
                LogToConsole("Confirm password failed");
                error = ex.Message;
            }
            
        }
        void LogToConsole(string message)
        {
            JSRuntime.InvokeVoidAsync("console.log", message);
        }
        
    }
}
