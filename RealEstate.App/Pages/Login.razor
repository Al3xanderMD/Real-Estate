@page "/Login"
@using FluentValidation
@using FluentValidation.Results
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstate.App.Auth
@using RealEstate.App.Data
@using RealEstate.App.Models
@using RealEstate.App.Validators
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject IValidator<LoginViewModel> Validator
@inject Blazored.SessionStorage.ISessionStorageService session
@inject ISnackbar Snackbar

<head>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

    <link rel="stylesheet" href="css/styles.css" />

    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
</head>

<div class="content-container">
    <div class="form-card">
        <div class="auth-form-buttons-div">
            <MudButton Variant="Variant.Text" Href="login">Login</MudButton>

            <MudButton Variant="Variant.Text" Href="register">Register</MudButton>
        </div>

        <EditForm Model="@loginRequest" OnValidSubmit="OnSubmit">
            <hr class="auth-hr">

            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" @bind-Value="loginRequest.Email" id="email" type="email" Label="Enter email"></MudTextField>

                <div class="error-msg auth-message">@emailError</div>
            </div>


            <div class="auth-input-div">
                <MudTextField Variant="Variant.Text" @bind-Value="loginRequest.Password" id="password" InputType="InputType.Password" Label="Enter password"></MudTextField>

                <div class="error-msg auth-message">@passwordError</div>
            </div>

            <div class="auth-forgot-password-div">
                <NavLink href="forgotpw">
                    <p class="forgot-password-anchor">Forgot your password?</p>
                </NavLink>
            </div>

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>

            <hr class="auth-hr">
            <div class="auth-message">@error</div>
        </EditForm>
    </div>
</div>

@code {
    LoginViewModel loginRequest { get; set; } = new LoginViewModel();
    string error { get; set; }
    string emailError { get; set; }
    string passwordError { get; set; }
    private AuthenticationState authenticationState;

    protected override async Task OnInitializedAsync()
    {
        authenticationState = await authStateProvider.GetAuthenticationStateAsync();

        if (authenticationState.User.Identity.IsAuthenticated)
        {
            navigationManager.NavigateTo("/");
        }
    }

    async Task OnSubmit()
    {
        ValidationResult results = Validator.Validate(loginRequest);
        emailError = null;
        passwordError = null;
        error = null;

        if (!results.IsValid)
        {

            foreach (var failure in results.Errors)
            {
                if (failure.PropertyName == "Email")
                    emailError = failure.ErrorMessage;
                else if (failure.PropertyName == "Password")
                    passwordError = failure.ErrorMessage;
            }
        }
        else
        {
            try
            {
                await authStateProvider.Login(loginRequest);
                LogToConsole("Login ok");

                var user = new UserInfo();
                user.Email = loginRequest.Email;

                Console.WriteLine("ran session init");
                await session.SetItemAsync("SessionUser", user);

                navigationManager.NavigateTo("/",forceLoad:true);
            }
            catch (Exception ex)
            {
                LogToConsole("Wrong credentials");
                Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
                if (emailError == null && passwordError == null)
                {
                    error = ex.Message;
                }
            }
        }
    }

    void LogToConsole(string message)
    {
        JSRuntime.InvokeVoidAsync("console.log", message);
    }
}

