@page "/profile"
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstate.App.Auth
@using RealEstate.App.Data
@using RealEstate.App.Models
@using RealEstate.App.Tools

@inject HttpClient Http
@inject NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService session
@inject CustomStateProvider authStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<head>
	<link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
	<link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

	<script src="_content/MudBlazor/MudBlazor.min.js"></script>
	<link rel="stylesheet" href="css/styles.css?v=@MyTools.ver" />
</head>

<DataLoader />

<PageTitle>Profile</PageTitle>

@if (isLoaded)  @* Please, for the love of God transfer the styles to .css *@
{

	<MudContainer MaxWidth="MaxWidth.ExtraLarge">
		<MudText Typo="Typo.h3" Style="text-align:center;">Profile</MudText>
		<MudGrid Justify="Justify.SpaceEvenly">
			<MudItem xs="12" sm="12" md="4" lg="4">
				<MudPaper Elevation="3" Style="height:100%; display:flex; flex-direction:column; justify-content:center;">
					<MudStack AlignItems="AlignItems.Center">
						<MudImage Src="images/default-icon.jpg" Style="height:100px; width:auto;" Alt="Profile picture" Elevation="25" Class="rounded-lg" />
						<MudText Typo="Typo.h5">@authenticationState.User.Identity.Name</MudText>
						<MudText>@client.name</MudText>
						<MudText>@client.email</MudText>
						<MudText>@client.phoneNumber</MudText>
					</MudStack>
				</MudPaper>
			</MudItem>

			<MudItem xs="12" sm="12" md="4" lg="4">
				<MudStack AlignItems="AlignItems.Center">
					<MudLink Style="width:100%; text-decoration:none; text-align:center;" Href="settings">
						<MudPaper Class="pa-16 ma-2" Elevation="3">
							<MudIcon Icon="@Icons.Material.Filled.Person"></MudIcon>
							Change details
						</MudPaper>
					</MudLink>

					<MudLink Style="width:100%; text-decoration:none; text-align:center;" Href="myposts">
						<MudPaper Class="pa-16 ma-2" Elevation="3">
							<MudIcon Icon="@Icons.Material.Filled.Assistant"></MudIcon>
							My posts
						</MudPaper>
					</MudLink>
				</MudStack>
			</MudItem>

			<MudItem xs="12" sm="12" md="4" lg="4">
				<MudStack>
					<div>
						<MudText Typo="Typo.h5">Last browsed</MudText>
						<MudCarousel Style="height:200px;" Class="mud-width-full" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="false" AutoCycle="false" TData="object">
							<MudCarouselItem Transition="@transition" Color="@Color.Primary">
								<div class="d-flex" style="height:100%">
									<MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
								</div>
							</MudCarouselItem>
							<MudCarouselItem Transition="@transition" Color="@Color.Secondary">
								<div class="d-flex" style="height:100%">
									<MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
								</div>
							</MudCarouselItem>
							<MudCarouselItem Transition="@transition">
								<div class="d-flex" style="height:100%">
									<MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Color="@Color.Primary" Size="@Size.Large" />
								</div>
							</MudCarouselItem>
						</MudCarousel>
						<MudButton Variant="Variant.Text">See all</MudButton>
					</div>

					<div>
						<MudText Typo="Typo.h5">Saved Properties</MudText>
						<MudCarousel Style="height:200px;" Class="mud-width-full" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="false" AutoCycle="false" TData="object">
							<MudCarouselItem Transition="@transition" Color="@Color.Primary">
								<div class="d-flex" style="height:100%">
									<MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
								</div>
							</MudCarouselItem>
							<MudCarouselItem Transition="@transition" Color="@Color.Secondary">
								<div class="d-flex" style="height:100%">
									<MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Size="@Size.Large" />
								</div>
							</MudCarouselItem>
							<MudCarouselItem Transition="@transition">
								<div class="d-flex" style="height:100%">
									<MudIcon Class="mx-auto my-auto" Icon="@Icons.Custom.Brands.MudBlazor" Color="@Color.Primary" Size="@Size.Large" />
								</div>
							</MudCarouselItem>
						</MudCarousel>
						<MudButton Variant="Variant.Text">See all</MudButton>
					</div>
				</MudStack>
			</MudItem>

			
		</MudGrid>
	</MudContainer>
}

@code {
	private UserInfo user;
	private AuthenticationState authenticationState;
	public ClientDataViewModel client = new ClientDataViewModel();
	public bool isAuth { get; set; }
	public bool isLoaded { get; set; }
	Transition transition = Transition.Slide;


	public async Task GetSessionUser()
	{
		user = await session.GetItemAsync<UserInfo>("SessionUser");
	}

	public async Task Logout()
	{
		session.ClearAsync();
		await authStateProvider.Logout();
		user = new UserInfo();
		navigationManager.NavigateTo("/login", forceLoad: true);
	}

	protected override async Task OnParametersSetAsync()
	{
		await GetSessionUser();
		Console.WriteLine("started");
		authenticationState = await authStateProvider.GetAuthenticationStateAsync();

		client = await localStorage.GetItemAsync<ClientDataViewModel>("clientData");
		authenticationState = await authStateProvider.GetAuthenticationStateAsync();

		if (!authenticationState.User.Identity.IsAuthenticated)
		{
			navigationManager.NavigateTo("/");
		}

		if (authenticationState.User.Identity.IsAuthenticated)
		{
			Console.WriteLine("authState : " + authenticationState.User.Identity.Name);
			isAuth = true;
		}
		else
		{
			Console.WriteLine("not authenticated");
			isAuth = false;
		}

		isLoaded = true;
	}
}    