@page "/browse"
@using RealEstate.App.Data
@using RealEstate.App.Models
@using RealEstate.App.Operations.Create.Models
@using RealEstate.App.Operations.Fetch.Models
@using RealEstate.App.Operations.Fetch.Response
@using RealEstate.App.Tools

@inject FetchService fetchService
@inject CreateService createService
@inject DeleteService deleteService
@inject ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<head>
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />

    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <link rel="stylesheet" href="css/styles.css?v=@MyTools.ver" />
</head>

<PageTitle>Browse Properties</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Class="featured-title" Typo="Typo.h4">Browse Properties</MudText>

    <MudGrid Justify="Justify.SpaceEvenly">
        <div class="row">
            @if (loaded)
            {
                if (posts != null)
                {
                    message = "";
                    foreach (var post in posts)
                    {
                        if (post != null)
                        {
                            
                            <MudItem xs="12" sm="6" md="4" lg="3">
                                    <MudCard Class="browse-card" Elevation="1">
                                        <MudLink Href="@($"{post.type}/post/{post.id}")" Style="text-decoration:none; color : black;">
                                            <MudCardMedia Image="https://images.unsplash.com/photo-1592595896551-12b371d546d5?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" /> @*replace with dynamic when implemented*@
                                            <MudCardContent>
                                                <MudText Typo="Typo.h5">@post.basePost.titlePost</MudText>
                                                <MudText Typo="Typo.body2"><MudIcon Icon="@Icons.Material.Filled.Euro" />@post.basePost.price</MudText>
                                            </MudCardContent>
                                        </MudLink>
                                            <MudCardActions>

                                            @if (client != null)
                                            {
                                                if (favouritesIds.Contains(post.basePostId))
                                                {
                                                    FavouriteFetchViewModel favourite = favourites.Find(x => x.basePostId == post.basePostId);
                                                    Guid favouriteId = Guid.Empty;

                                                    if (favourite != null)
                                                    {
                                                        Console.WriteLine("favourite found in list!!!!");
                                                        favouriteId = favourite.id;
                                                        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Error" OnClick="@(async () => await deleteFavourite(favouriteId))" />
                                                    }
                                                }
                                                else
                                                {
                                                    <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Default" OnClick="@(async () => await addToFavourites(post.basePostId))" />
                                                }
                                            } 
                                            else
                                            {
                                                <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Color="Color.Default" />
                                            }   


                                                <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
                                            </MudCardActions>
                                        </MudCard>
                                </MudItem>
                        }
                    }
                }
                else
                {
                    message = "No posts found";
                    noLoad = true;    
                }
            }
            
        </div>
    </MudGrid>

    <MudText Typo="Typo.body1" Color="Color.Error" Style="text-align:center;">@message</MudText>

    <MudButton OnClick="fetchPosts" Disabled=noLoad>
        Load more posts
    </MudButton>


</MudContainer>

    @code {
    private int step = 2;
    private int start_count = 1;
    private int end_count = 2;
    private bool noLoad = false;
    private bool loaded = false;
    List<PostResponseViewModel> posts;
    private string message = "";
    ClientDataViewModel client = new ClientDataViewModel();
    List<FavouriteFetchViewModel> favourites;
    List<Guid> favouritesIds;


    protected override async Task OnInitializedAsync()
    {
        client = await localStorage.GetItemAsync<ClientDataViewModel>("clientData");

        if (client != null)
        {
            Console.WriteLine("user found!!!");
            await setFavourites();

        }
        else
        {
            Console.WriteLine("user not found");
        }

        if (await sessionStorage.ContainKeyAsync("posts"))
        {
            posts = await sessionStorage.GetItemAsync<List<PostResponseViewModel>>("posts");
            start_count = await sessionStorage.GetItemAsync<int>("start_count");
            end_count = await sessionStorage.GetItemAsync<int>("end_count");
            noLoad = await sessionStorage.GetItemAsync<bool>("noLoad");

            await setFavourites();

            Console.WriteLine("posts found in session storage");
            loaded = true;
        }
        else
        {
            posts = await fetchService.FetchPostsAsync(start_count, end_count);

            if (posts != null)
            {
                Console.WriteLine("posts found");
                if (posts.Count != step)
                {
                    Console.WriteLine("NOLOAD");
                    message = "No more posts to load";
                    noLoad = true;
                }
                else
                {
                    start_count = end_count + 1;
                    end_count = start_count + step - 1;
                }
            }
            else
            {
                Console.WriteLine("posts not found");
                noLoad = true;
                message = "No posts found";
            }
        }

        loaded = true;
    }

    public async Task setFavourites()
    {
        Console.WriteLine("setting favourites. . .");
        favourites = await fetchService.FetchFavouritesUserAsync(new Guid(client.userId));
        List<Guid> favouritesIdList = new List<Guid>();
        if (favourites != null)
        {
            Console.WriteLine("favourites found");
            foreach (var favourite in favourites)
            {
                favouritesIdList.Add(favourite.basePostId);
            }

            favouritesIds = favouritesIdList;
        }
        else
        {
            Console.WriteLine("favourites not found");
        }
    }

    public async Task fetchPosts()
    {
        Console.WriteLine("fetching posts. . .");
        if (!noLoad)
        {
            List<PostResponseViewModel> newposts = await fetchService.FetchPostsAsync(start_count, end_count);

            if (newposts != null)
            {
                Console.WriteLine("posts found");
                if (newposts.Count != step)
                {
                    Console.WriteLine("NOLOAD");
                    message = "No more posts to load";
                    noLoad = true;
                }
                else
                {
                    start_count = end_count+1;
                    end_count = start_count + step - 1;
                }

                posts.AddRange(newposts);
                await sessionStorage.SetItemAsync("posts", posts);
                await sessionStorage.SetItemAsync("start_count", start_count);
                await sessionStorage.SetItemAsync("end_count", end_count);
                await sessionStorage.SetItemAsync("noLoad", noLoad);
            }
            else
            {
                Console.WriteLine("posts not found");
                noLoad = true;
                message = "No posts found";
            }
        } 
    }

    public async Task addToFavourites(Guid postId)
    {

        if (client != null)
        {

            Console.WriteLine("adding to favourites " + client.userId + " " + postId);

            FavouriteCreateViewModel model = new FavouriteCreateViewModel
                {
                    userId = new Guid(client.userId),
                    basePostId = postId
                };

            await createService.CreateFavouriteListing(model);

            await setFavourites();

            StateHasChanged();

        }
        else
        {
            Console.WriteLine("user not found");
        }
    }

    public async Task deleteFavourite(Guid favouriteId)
    {
        if (client != null)
        {

            Console.WriteLine("deleting from favourites " + favouriteId);

            await deleteService.DeleteFavouriteAsync(favouriteId);

            await setFavourites();

            StateHasChanged();

        }
        else
        {
            Console.WriteLine("user not found");
        }
    }
}