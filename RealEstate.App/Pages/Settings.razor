@page "/settings"
@using FluentValidation
@using FluentValidation.Results
@using Microsoft.AspNetCore.Components.Authorization
@using RealEstate.App.Auth
@using RealEstate.App.Models
@using RealEstate.App.Operations.Update
@using RealEstate.App.Services

@inject IValidator<ClientDataViewModel> Validator
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject CustomStateProvider authStateProvider
@inject UpdateService updater
@inject NavigationManager navigationManager
@inject ISnackbar Snackbar

<div class="content-container">
	<h1 class="text-center">Change profile details</h1>

	@if (isLoaded)
	{
		<MudContainer>
			<EditForm Model="@client" OnValidSubmit="HandleValidSubmit">
				<MudPaper Class="mud-elevation-4" Padding="16px">
					<MudStack Spacing="6" Justify="Justify.Center">
						<MudTextField @bind-Value="client.name" Label="Name" />
						 @* <div class="error-msg auth-message">@nameError</div> *@
						<MudTextField @bind-Value="emailAddress" Label="Email" Disabled=true/>
						
						<MudTextField @bind-Value="client.phoneNumber" Label="Phone Number" />
						@*  <div class="error-msg auth-message">@phoneNumberError</div> *@
						<MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Submit</MudButton>
					</MudStack>
				</MudPaper>
			</EditForm>
		</MudContainer>
	}
</div>

@code {
	public ClientDataViewModel client = new ClientDataViewModel();
	private AuthenticationState authenticationState;
	private bool isLoaded = false;
	string id = "";
	
	string error { get; set; }
	string nameError { get; set; }
	string phoneNumberError { get; set; }
	string emailAddress { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		client = await localStorage.GetItemAsync<ClientDataViewModel>("clientData");
		authenticationState = await authStateProvider.GetAuthenticationStateAsync();

		if (client != null)
		{
			emailAddress = client.email;
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("user not found");
		}

		isLoaded = true;
	}

	public async void HandleValidSubmit()
	{
		ValidationResult results = Validator.Validate(client);
		nameError = null;
		phoneNumberError = null;


		if (!results.IsValid)
		{
			foreach (var failure in results.Errors)
			{
				if (failure.PropertyName == "phoneNumber" && phoneNumberError == null)
					phoneNumberError = failure.ErrorMessage;
				else if (failure.PropertyName == "name" && nameError == null)
					nameError = failure.ErrorMessage;
			}


			if (!string.IsNullOrEmpty(phoneNumberError))
				Snackbar.Add(phoneNumberError, MudBlazor.Severity.Error);

			if (!string.IsNullOrEmpty(nameError))
				Snackbar.Add(nameError, MudBlazor.Severity.Error);
		}
		else
		{
			try
			{
				if (client != null)
				{
					Console.WriteLine(client.userId);
					if (isLoaded)
					{
						await updater.UpdateClientData(client);
						navigationManager.NavigateTo("/", forceLoad: true);
					}
				}
			}
			catch (Exception ex)
			{

				Console.WriteLine("Changing info failed.");
				error = ex.Message;
				Snackbar.Add(ex.Message, MudBlazor.Severity.Error);
			}
		}
	}
}
