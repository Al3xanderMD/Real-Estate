@using Microsoft.AspNetCore.Components.Authorization
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using RealEstate.App.Auth
@using RealEstate.App.Models

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject CustomStateProvider authStateProvider
@inject HttpClient httpClient
@inject Blazored.SessionStorage.ISessionStorageService session 
@inject ISessionStorageService sessionStorage
@inject NavigationManager navigationManager

@code {
    private AuthenticationState authenticationState;

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("DataLoader init");
        authenticationState = await authStateProvider.GetAuthenticationStateAsync();

        if (authenticationState.User.Identity.IsAuthenticated)
        {
            localStorage.SetItemAsync("isAuth", true);
            await FetchDataAndStoreInLocalStorage();
        }
        else
        {
            localStorage.SetItemAsync("isAuth", false);
        }
    }

    public async Task FetchDataAndStoreInLocalStorage()
    {
        if (authenticationState.User.Identity.IsAuthenticated)
        {
            string id = authenticationState.User.FindFirst("userId").Value;
            Console.WriteLine("Fetching data for : " + id);
            string jsonString = "";
            var result = await httpClient.GetAsync("https://localhost:7190/api/v1/Client/" + id); //make the link dynamic later
            if (result.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                throw new Exception(await result.Content.ReadAsStringAsync());
            } else
            {
                jsonString = await result.Content.ReadAsStringAsync();
                Console.WriteLine(jsonString);
                ClientDataViewModel clientData = JsonConvert.DeserializeObject<ClientDataViewModel>(jsonString);

                if (new Guid(clientData.userId) == Guid.Empty)
                {
                    Console.WriteLine("User not found");

                    session.ClearAsync();
		            await authStateProvider.Logout();
		            navigationManager.NavigateTo("/login", forceLoad: true);

                    return;
                };

                await localStorage.SetItemAsync<ClientDataViewModel>("clientData", clientData);
            }

        }
    }
}
